import pandas as pd
import numpy as np
import seaborn as sns
import matplotlib.pyplot as plt

from sklearn.model_selection import train_test_split
from sklearn.preprocessing import StandardScaler
from sklearn.linear_model import LinearRegression
from sklearn.metrics import mean_squared_error, r2_score
from xgboost import XGBRegressor


def load_data():
    from google.colab import files
    uploaded = files.upload()
    filename = list(uploaded.keys())[0]
    data = pd.read_csv(filename)
    print(f"Data loaded: {filename}, shape = {data.shape}")
    return data

# Preprocess the dataset
def preprocess_data(df):
    df = df.drop(columns=['Id'], errors='ignore')
    df = df.select_dtypes(include=[np.number])
    df = df.dropna()
    return df


def visualize_data(df, target='SalePrice'):
    plt.figure(figsize=(8, 4))
    sns.histplot(df[target], kde=True)
    plt.title("Distribution of SalePrice")
    plt.xlabel("SalePrice")
    plt.ylabel("Frequency")
    plt.show()

    plt.figure(figsize=(12, 10))
    corr = df.corr()
    sns.heatmap(corr, cmap='coolwarm', annot=False, fmt=".2f")
    plt.title("Correlation Heatmap")
    plt.show()


    top_corr = corr[target].drop(target).abs().sort_values(ascending=False).head(5)
    print("Top correlated features with SalePrice:")
    print(top_corr)


def prepare_data(df, target='SalePrice'):
    X = df.drop(columns=[target])
    y = df[target]

    X_train, X_test, y_train, y_test = train_test_split(
        X, y, test_size=0.2, random_state=42
    )

    scaler = StandardScaler()
    X_train_scaled = scaler.fit_transform(X_train)
    X_test_scaled = scaler.transform(X_test)

    return X_train_scaled, X_test_scaled, y_train, y_test, X.columns


def train_models(X_train, y_train):
    lr = LinearRegression()
    lr.fit(X_train, y_train)

    xgb = XGBRegressor(n_estimators=100, learning_rate=0.1, random_state=42)
    xgb.fit(X_train, y_train)

    return lr, xgb

def evaluate_model(model, X_test, y_test, model_name):
    preds = model.predict(X_test)
    rmse = np.sqrt(mean_squared_error(y_test, preds))
    r2 = r2_score(y_test, preds)

    print(f"{model_name} Performance:")
    print(f"  RMSE: {rmse:.2f}")
    print(f"  RÂ² Score: {r2:.2f}")
    print("-" * 40)


    plt.figure(figsize=(6, 6))
    sns.scatterplot(x=y_test, y=preds, alpha=0.6)
    plt.plot([y_test.min(), y_test.max()], [y_test.min(), y_test.max()], color='red', linestyle='--')
    plt.xlabel("Actual SalePrice")
    plt.ylabel("Predicted SalePrice")
    plt.title(f"{model_name}: Actual vs Predicted")
    plt.grid(True)
    plt.show()


if __name__ == "__main__":
    df = load_data()
    df_clean = preprocess_data(df)

    visualize_data(df_clean)

    X_train, X_test, y_train, y_test, feature_names = prepare_data(df_clean)

    lr_model, xgb_model = train_models(X_train, y_train)

    evaluate_model(lr_model, X_test, y_test, "Linear Regression")
    evaluate_model(xgb_model, X_test, y_test, "XGBoost Regressor")
